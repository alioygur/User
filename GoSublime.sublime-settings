{
	"env": {"GOPATH": "$HOME/go", "PATH": "$GOPATH/bin:$PATH" },

 "fmt_cmd": ["goimports"],
 "gslint_enabled": false,
   // Not Implemented
   // Whether or not gslint is enabled
   "lint_enabled": false,

   // enable comp-lint, this will effectively disable the live linter
   "comp_lint_enabled": true,

   // list of commands to run
   "comp_lint_commands": [
       // run `golint` on all files in the package
       // "shell":true is required in order to run the command through your shell (to expand `*.go`)
       // also see: the documentation for the `shell` setting in the default settings file ctrl+dot,ctrl+4
       {"cmd": ["golint *.go"], "shell": true},

       // run go vet on the package
       {"cmd": ["go", "vet"]},

       // run `go install` on the package. GOBIN is set,
       // so `main` packages shouldn't result in the installation of a binary
       {"cmd": ["go", "install"]}
   ],

   "on_save": [
       // run comp-lint when you save,
       // naturally, you can also bind this command `gs_comp_lint`
       // to a key binding if you want
       {"cmd": "gs_comp_lint"}
   ],
   "snippets":[
    {
      "match": {"global": true, "pkgname": "."},
      "snippets": [
        {"text": "log.Println(...)", "title": "", "value": "log.Println($1)"},
        {"text": "log.Printf(...)", "title": "", "value": "log.Printf(\"%+v\", $1)"},
        {"text": "if err != nil", "title": "", "value": "if err != nil {\n\treturn $1\n}"},
        {"text": "ctx, _ = getCtx(r)", "title": "", "value": "ctx, _ := getCtx(r)"}
      ]
    }
   ]
}